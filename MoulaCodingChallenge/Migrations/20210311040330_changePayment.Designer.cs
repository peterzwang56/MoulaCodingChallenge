// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoulaCodingChallenge.Data;

namespace MoulaCodingChallenge.Migrations
{
    [DbContext(typeof(AccountContext))]
    [Migration("20210311040330_changePayment")]
    partial class changePayment
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MoulaCodingChallenge.Data.Models.AccountModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountNumber = 1,
                            Balance = 104.11m,
                            UserName = "Eren"
                        },
                        new
                        {
                            Id = 2,
                            AccountNumber = 2,
                            Balance = 104.4m,
                            UserName = "Eren"
                        },
                        new
                        {
                            Id = 3,
                            AccountNumber = 3,
                            Balance = 104.1m,
                            UserName = "Mikasa"
                        });
                });

            modelBuilder.Entity("MoulaCodingChallenge.Data.Models.PaymentModel", b =>
                {
                    b.Property<long>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ClosedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.HasIndex("AccountId");

                    b.ToTable("Payment");

                    b.HasData(
                        new
                        {
                            PaymentId = 1L,
                            AccountId = 1,
                            Amount = 10.33m,
                            Date = new DateTime(2021, 3, 11, 3, 53, 30, 100, DateTimeKind.Utc).AddTicks(8733),
                            Status = "Open"
                        },
                        new
                        {
                            PaymentId = 2L,
                            AccountId = 1,
                            Amount = 11.33m,
                            Date = new DateTime(2021, 3, 11, 3, 54, 30, 100, DateTimeKind.Utc).AddTicks(8733),
                            Status = "Open"
                        },
                        new
                        {
                            PaymentId = 3L,
                            AccountId = 1,
                            Amount = 12.33m,
                            Date = new DateTime(2021, 3, 11, 3, 55, 30, 100, DateTimeKind.Utc).AddTicks(8733),
                            Status = "Open"
                        },
                        new
                        {
                            PaymentId = 4L,
                            AccountId = 1,
                            Amount = 13.33m,
                            Date = new DateTime(2021, 3, 11, 3, 56, 30, 100, DateTimeKind.Utc).AddTicks(8733),
                            Status = "Open"
                        },
                        new
                        {
                            PaymentId = 5L,
                            AccountId = 2,
                            Amount = 10.33m,
                            Date = new DateTime(2021, 3, 11, 3, 53, 30, 101, DateTimeKind.Utc).AddTicks(5366),
                            Status = "Open"
                        },
                        new
                        {
                            PaymentId = 6L,
                            AccountId = 2,
                            Amount = 11.33m,
                            Date = new DateTime(2021, 3, 11, 3, 54, 30, 101, DateTimeKind.Utc).AddTicks(5366),
                            Status = "Open"
                        },
                        new
                        {
                            PaymentId = 7L,
                            AccountId = 2,
                            Amount = 12.33m,
                            Date = new DateTime(2021, 3, 11, 3, 55, 30, 101, DateTimeKind.Utc).AddTicks(5366),
                            Status = "Open"
                        },
                        new
                        {
                            PaymentId = 8L,
                            AccountId = 2,
                            Amount = 13.33m,
                            Date = new DateTime(2021, 3, 11, 3, 56, 30, 101, DateTimeKind.Utc).AddTicks(5366),
                            Status = "Open"
                        });
                });

            modelBuilder.Entity("MoulaCodingChallenge.Data.Models.PaymentModel", b =>
                {
                    b.HasOne("MoulaCodingChallenge.Data.Models.AccountModel", "Account")
                        .WithMany("PaymentHistory")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("MoulaCodingChallenge.Data.Models.AccountModel", b =>
                {
                    b.Navigation("PaymentHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
